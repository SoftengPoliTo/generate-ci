---
source: tests/common/mod.rs
expression: content
---
name: cargo-rust-library

on:
  push:
    branches:
      - main
    paths:
      - 'src/**'
      - 'tests/**'
      - 'crates/**'
      - 'fuzz/**'
      - '.github/**'
      - 'Cargo.toml'
      - 'Cargo.lock'
  pull_request:
    branches:
      - main
    paths:
      - 'src/**'
      - 'tests/**'
      - 'crates/**'
      - 'fuzz/**'
      - '.github/**'
      - 'Cargo.toml'
      - 'Cargo.lock'

env:
  #
  # Dependency versioning
  #

  RCA_VERSION: "0.0.25"

  GRCOV_VERSION: "0.8.13"

  WCC_VERSION: "0.3.0"

  UDEPS_VERSION: "0.1.35"

  CAREFUL_VERSION: "0.3.4"

jobs:

################################## LEGAL AND FORMAT LAYER ######################

  reuse:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: REUSE Compliance Check
      uses: fsfe/reuse-action@v1

  clippy-rustfmt:

    strategy:
      matrix:
        platform: [ubuntu-latest, macos-latest, windows-latest]

    runs-on: ${{ matrix.platform }}

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust stable
      uses: dtolnay/rust-toolchain@stable
      with:
        components: clippy, rustfmt

    - name: Run rustfmt
      run:
        cargo fmt --all -- --check --verbose

    - name: Run cargo clippy
      uses: giraffate/clippy-action@v1
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        clippy_flags: --all-targets -- -D warnings
        reporter: github-pr-check

  static-code-analysis:

    env:
      RCA_LINK: https://github.com/mozilla/rust-code-analysis/releases/download

    strategy:
      matrix:
        conf:
          - ubuntu
          - windows
        include:
          - conf: ubuntu
            platform: ubuntu-latest
            dir: $PWD
          - conf: windows
            platform: windows-latest
            dir: src/ # FIXME Broken on Windows with absolute paths, so using src/ as path for now

    runs-on: ${{ matrix.platform }}

    steps:
    - uses: actions/checkout@v4

    - name: Install rust-code-analysis on Ubuntu
      if: matrix.conf == 'ubuntu'
      run: |
        mkdir -p $HOME/.local/bin
        curl -L "$RCA_LINK/v$RCA_VERSION/rust-code-analysis-linux-cli-x86_64.tar.gz" |
        tar xz -C $HOME/.local/bin
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Install rust-code-analysis on Windows
      if: matrix.conf == 'windows'
      run: |
        mkdir -p $HOME/bin
        curl -LO "$Env:RCA_LINK/v$env:RCA_VERSION/rust-code-analysis-win-cli-x86_64.zip"
        7z e -y "rust-code-analysis-win-cli-x86_64.zip" -o"$HOME/bin"
        echo "$HOME/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: Run rust-code-analysis
      run: |
        mkdir $HOME/rca-json
        rust-code-analysis-cli --metrics -O json --pr -o "$HOME/rca-json" -p ${{ matrix.dir }}

    - name: Upload rust-code-analysis json
      uses: actions/upload-artifact@v3
      with:
        name: rca-json-${{ matrix.conf }}
        path: ~/rca-json

################################## BUILD AND DOCS LAYER ########################

  build:

    needs: [reuse, clippy-rustfmt, static-code-analysis]

    strategy:
      matrix:
        platform: [ubuntu-latest, macos-latest, windows-latest]

    runs-on: ${{ matrix.platform }}

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust stable
      uses: dtolnay/rust-toolchain@stable

    - name: Build
      run: cargo build --verbose

  docs:

    needs: [reuse, clippy-rustfmt, static-code-analysis]

    strategy:
      matrix:
        platform: [ubuntu-latest, macos-latest, windows-latest]

    runs-on: ${{ matrix.platform }}

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust stable
      uses: dtolnay/rust-toolchain@stable

    - name: Generate docs
      run: cargo doc --verbose --no-deps

################################## CODE COVERAGE LAYER ##################################

  code-coverage-ubuntu:

    needs: [build, docs]

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust stable
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview

    - name: Install grcov
      env:
        GRCOV_LINK: https://github.com/mozilla/grcov/releases/download
      run: |
        curl -L "$GRCOV_LINK/v$GRCOV_VERSION/grcov-x86_64-unknown-linux-musl.tar.bz2" |
        tar xj -C $HOME/.cargo/bin

    - name: Run tests
      env:
        RUSTFLAGS: "-Cinstrument-coverage"
        LLVM_PROFILE_FILE: "cargo-rust-library-%p-%m.profraw"
      run: |
        cargo test --verbose

    - name: Get coverage data for codecov
      run: |
        grcov . --binary-path ./target/debug/ -s . -t lcov --branch \
              --ignore-not-existing --ignore "/*" --ignore "../*" -o lcov.info

    - name: Codecov upload
      uses: codecov/codecov-action@v4
      with:
        files: lcov.info
        token: ${{ secrets.CODECOV_TOKEN }}


  code-coverage-macos:

    needs: [build, docs]

    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust stable
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview

    - name: Install grcov
      env:
        GRCOV_LINK: https://github.com/mozilla/grcov/releases/download
      run: |
        curl -L "$GRCOV_LINK/v$GRCOV_VERSION/grcov-x86_64-apple-darwin.tar.bz2" |
        tar xj -C $HOME/.cargo/bin

    - name: Run tests
      env:
        RUSTFLAGS: "-Cinstrument-coverage"
        LLVM_PROFILE_FILE: "cargo-rust-library-%p-%m.profraw"
      run: |
        cargo test --verbose

    - name: Get coverage data for codecov
      run: |
        grcov . --binary-path ./target/debug/ -s . -t lcov --branch \
              --ignore-not-existing --ignore "/*" --ignore "../*" -o lcov.info

    - name: Codecov upload
      uses: codecov/codecov-action@v4
      with:
        files: lcov.info
        token: ${{ secrets.CODECOV_TOKEN }}

  code-coverage-windows:

    needs: [build, docs]

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust stable
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview

    - name: Install grcov
      env:
        GRCOV_LINK: https://github.com/mozilla/grcov/releases/download
        GRCOV_BINARY: grcov-x86_64-pc-windows-msvc.zip
      run: |
        curl -LO "$Env:GRCOV_LINK/v$Env:GRCOV_VERSION/$Env:GRCOV_BINARY"
        7z e -y "$Env:GRCOV_BINARY" -o"${env:USERPROFILE}\.cargo\bin"

    - name: Run tests
      env:
        RUSTFLAGS: "-Cinstrument-coverage"
        LLVM_PROFILE_FILE: "cargo-rust-library-%p-%m.profraw"
      run: |
        cargo test --verbose

    - name: Get coverage data for codecov
      run: |
        grcov . --binary-path ./target/debug/ -s . -t lcov --branch `
              --ignore-not-existing --ignore "/*" --ignore "../*" -o lcov.info

    - name: Codecov upload
      uses: codecov/codecov-action@v4
      with:
        files: lcov.info
        token: ${{ secrets.CODECOV_TOKEN }}


  weighted-code-coverage-ubuntu:

    needs: [build, docs]

    # Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages 
    # and pull-requests write pemission for the pull request comment.
    permissions:
      contents: write
      pages: write
      id-token: write
      pull-requests: write

    environment:
      name: wcc
      url: ${{ steps.deployment.outputs.page_url }}

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust stable
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview

    - name: Install grcov
      env:
        GRCOV_LINK: https://github.com/mozilla/grcov/releases/download
        GRCOV_BINARY: grcov-x86_64-unknown-linux-musl.tar.bz2
      run: |
        curl -L "$GRCOV_LINK/v$GRCOV_VERSION/$GRCOV_BINARY" |
        tar xj -C $HOME/.cargo/bin

    - name: Install weighted-code-coverage
      env:
        WCC_LINK: https://github.com/SoftengPoliTo/weighted-code-coverage/releases/download
        WCC_BINARY: weighted-code-coverage-x86_64-unknown-linux-gnu.tar.gz
      run: |
        curl -L "$WCC_LINK/v$WCC_VERSION/$WCC_BINARY" |
        tar xz -C $HOME/.cargo/bin

    - name: Run tests
      env:
        RUSTFLAGS: "-Cinstrument-coverage"
        LLVM_PROFILE_FILE: "cargo-rust-library-%p-%m.profraw"
      run: |
        cargo test --verbose

    - name: Run grcov
      run: |
        grcov . --binary-path ./target/debug/ --ignore "**/.cargo/**" --ignore "**/rustc/**" --ignore "./target/**" -t coveralls -s . --token YOUR_COVERALLS_TOKEN > coveralls.json

    - name: Run weighted-code-coverage
      id: wcc-run
      run: |
        mkdir $HOME/wcc-output
        echo "html=$HOME/wcc-output" >> $GITHUB_OUTPUT
        echo "json=$HOME/wcc-output/wcc.json" >> $GITHUB_OUTPUT
        weighted-code-coverage --project-path ./ --grcov-format coveralls --grcov-path ./coveralls.json -m functions --json $HOME/wcc-output/wcc.json --html $HOME/wcc-output/

    - name: Setup GitHub Pages
      uses: actions/configure-pages@v5.0.0
      with:
        enablement: true

    - name: Upload Wcc html output
      uses: actions/upload-pages-artifact@v3.0.1
      with:
        path: ${{ steps.wcc-run.outputs.html }}

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4.0.5

    - name: Extract metric values
      id: metrics
      env:
        JSON: ${{ steps.wcc-run.outputs.json }}
      run: |
        content=`cat ${JSON}`
        echo "json=$content" >> $GITHUB_OUTPUT

    - name: Extract branch name
      id: extract-branch
      if:  github.event_name != 'pull_request'
      run: echo "branch=${GITHUB_REF#refs/heads/}" >> "${GITHUB_OUTPUT}"

    - name: Define badge path
      id: badge-path
      if: github.event_name != 'pull_request'
      env:
        BADGE_PATH: .github/badges/wcc.svg
      run: echo "path=${BADGE_PATH}" >> "${GITHUB_OUTPUT}"
      
    - name: Create badge directory
      if: github.event_name != 'pull_request'
      env:
        BADGE_PATH: ${{ steps.badge-path.outputs.path }}
      run: mkdir -p "${BADGE_PATH%/*}" 

    - name: Determine badge color
      if: github.event_name != 'pull_request'
      id: badge-color
      env:
        WCC: ${{ fromJson(steps.metrics.outputs.json).projectMetrics.total.cyclomatic.wcc }}
      run: |
        if [ $(echo "${WCC} < 60.0" | bc) -eq 1 ]; then
          echo "color=red" >> "${GITHUB_OUTPUT}"
        else
          echo "color=green" >> "${GITHUB_OUTPUT}"
        fi

    - name: Create badge
      if: github.event_name != 'pull_request'
      uses: emibcn/badge-action@v2.0.3
      id: badge
      with:
        label: wcc
        status: ${{ fromJson(steps.metrics.outputs.json).projectMetrics.total.cyclomatic.wcc }}%
        color: ${{ steps.badge-color.outputs.color }}
        path: ${{ steps.badge-path.outputs.path }}

    - name: Verify if badge changed
      if: github.event_name != 'pull_request'
      uses: tj-actions/verify-changed-files@v19
      id: badge-changed 
      with:
        files: ${{ steps.badge-path.outputs.path }}
      
    - name: Commit badge
      if: ${{ github.event_name != 'pull_request' && steps.badge-changed.outputs.files_changed == 'true' }}
      env:
        BADGE: ${{ steps.badge-path.outputs.path }}
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add "${BADGE}"
        git commit -m "Add/Update wcc badge"

    - name: Push badge
      uses: ad-m/github-push-action@master
      if: ${{ github.event_name != 'pull_request' && success() }}
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ steps.extract-branch.outputs.branch }}

    - name: Create or update comment
      if: github.event_name == 'pull_request'
      uses: peter-evans/create-or-update-comment@v4
      env:
        COVERAGE: ${{ fromJson(steps.metrics.outputs.json).projectMetrics.total.coverage }}
        WCC_CYC: ${{ fromJson(steps.metrics.outputs.json).projectMetrics.total.cyclomatic.wcc }}
        WCC_COG: ${{ fromJson(steps.metrics.outputs.json).projectMetrics.total.cognitive.wcc }}
        CRAP_CYC: ${{ fromJson(steps.metrics.outputs.json).projectMetrics.total.cyclomatic.crap }} 
        CRAP_COG: ${{ fromJson(steps.metrics.outputs.json).projectMetrics.total.cognitive.crap }}
        SKUNK_CYC: ${{ fromJson(steps.metrics.outputs.json).projectMetrics.total.cyclomatic.skunk }}
        SKUNK_COG: ${{ fromJson(steps.metrics.outputs.json).projectMetrics.total.cognitive.skunk }}
      with:
        comment-id: ${{ github.event.comment.id }}
        issue-number: ${{ github.event.pull_request.number }}
        body: |
          ## Weighted Code Coverage
          Project metrics:
          - **Coverage**: ${{ env.COVERAGE }}%

          |             | Wcc                          | CRAP                        | Skunk                        |
          |-------------|------------------------------|-----------------------------|------------------------------|
          | Cyclomatic  | ${{ env.WCC_CYC }}%  | ${{ env.CRAP_CYC }} | ${{ env.SKUNK_CYC }} |
          | Cognitive   | ${{ env.WCC_COG }}%  | ${{ env.CRAP_COG }} | ${{ env.SKUNK_COG }} |
        edit-mode: replace

  weighted-code-coverage-macos:

    needs: [build, docs]

    # Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages 
    # and pull-requests write pemission for the pull request comment.
    permissions:
      contents: write
      pages: write
      id-token: write
      pull-requests: write

    environment:
      name: wcc
      url: ${{ steps.deployment.outputs.page_url }}

    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust stable
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview

    - name: Install grcov
      env:
        GRCOV_LINK: https://github.com/mozilla/grcov/releases/download
        GRCOV_BINARY: grcov-x86_64-apple-darwin.tar.bz2
      run: |
        curl -L "$GRCOV_LINK/v$GRCOV_VERSION/$GRCOV_BINARY" |
        tar xj -C $HOME/.cargo/bin

    - name: Install weighted-code-coverage
      env:
        WCC_LINK: https://github.com/SoftengPoliTo/weighted-code-coverage/releases/download
        WCC_BINARY: weighted-code-coverage-x86_64-apple-darwin.tar.gz
      run: |
        curl -L "$WCC_LINK/v$WCC_VERSION/$WCC_BINARY" |
        tar xz -C $HOME/.cargo/bin

    - name: Run tests
      env:
        RUSTFLAGS: "-Cinstrument-coverage"
        LLVM_PROFILE_FILE: "cargo-rust-library-%p-%m.profraw"
      run: |
        cargo test --verbose

    - name: Run grcov
      run: |
        grcov . --binary-path ./target/debug/ --ignore "**/.cargo/**" --ignore "**/rustc/**" --ignore "./target/**" -t coveralls -s . --token YOUR_COVERALLS_TOKEN > coveralls.json

    - name: Run weighted-code-coverage
      id: wcc-run
      run: |
        mkdir $HOME/wcc-output
        echo "html=$HOME/wcc-output" >> $GITHUB_OUTPUT
        echo "json=$HOME/wcc-output/wcc.json" >> $GITHUB_OUTPUT
        weighted-code-coverage --project-path ./ --grcov-format coveralls --grcov-path ./coveralls.json -m functions --json $HOME/wcc-output/wcc.json --html $HOME/wcc-output/

    - name: Setup GitHub Pages
      uses: actions/configure-pages@v5.0.0
      with:
        enablement: true

    - name: Upload Wcc html output
      uses: actions/upload-pages-artifact@v3.0.1
      with:
        path: ${{ steps.wcc-run.outputs.html }}

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4.0.5

    - name: Extract metric values
      id: metrics
      env:
        JSON: ${{ steps.wcc-run.outputs.json }}
      run: |
        content=`cat ${JSON}`
        echo "json=$content" >> $GITHUB_OUTPUT

    - name: Extract branch name
      id: extract-branch
      if: github.event_name != 'pull_request'
      run: echo "branch=${GITHUB_REF#refs/heads/}" >> "${GITHUB_OUTPUT}"

    - name: Define badge path
      id: badge-path
      if: github.event_name != 'pull_request'
      env:
        BADGE_PATH: .github/badges/wcc.svg
      run: echo "path=${BADGE_PATH}" >> "${GITHUB_OUTPUT}"
      
    - name: Create badge directory
      if: github.event_name != 'pull_request'
      env:
        BADGE_PATH: ${{ steps.badge-path.outputs.path }}
      run: mkdir -p "${BADGE_PATH%/*}" 

    - name: Determine badge color
      if: github.event_name != 'pull_request'
      id: badge-color
      env:
        WCC: ${{ fromJson(steps.metrics.outputs.json).projectMetrics.total.cyclomatic.wcc }}
      run: |
        if [ $(echo "${WCC} < 60.0" | bc) -eq 1 ]; then
          echo "color=red" >> "${GITHUB_OUTPUT}"
        else
          echo "color=green" >> "${GITHUB_OUTPUT}"
        fi

    - name: Create badge
      if: github.event_name != 'pull_request'
      uses: emibcn/badge-action@v2.0.3
      id: badge
      with:
        label: wcc
        status: ${{ fromJson(steps.metrics.outputs.json).projectMetrics.total.cyclomatic.wcc }}%
        color: ${{ steps.badge-color.outputs.color }}
        path: ${{ steps.badge-path.outputs.path }}

    - name: Verify if badge changed
      if: github.event_name != 'pull_request'
      uses: tj-actions/verify-changed-files@v19
      id: badge-changed 
      with:
        files: ${{ steps.badge-path.outputs.path }}
      
    - name: Commit badge
      if: ${{ github.event_name != 'pull_request' && steps.badge-changed.outputs.files_changed == 'true' }}
      env:
        BADGE: ${{ steps.badge-path.outputs.path }}
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add "${BADGE}"
        git commit -m "Add/Update wcc badge"

    - name: Push badge
      uses: ad-m/github-push-action@master
      if: ${{ github.event_name != 'pull_request' && success() }}
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ steps.extract-branch.outputs.branch }}

    - name: Create or update comment
      if: github.event_name == 'pull_request'
      uses: peter-evans/create-or-update-comment@v4
      env:
        COVERAGE: ${{ fromJson(steps.metrics.outputs.json).projectMetrics.total.coverage }}
        WCC_CYC: ${{ fromJson(steps.metrics.outputs.json).projectMetrics.total.cyclomatic.wcc }}
        WCC_COG: ${{ fromJson(steps.metrics.outputs.json).projectMetrics.total.cognitive.wcc }}
        CRAP_CYC: ${{ fromJson(steps.metrics.outputs.json).projectMetrics.total.cyclomatic.crap }}
        CRAP_COG: ${{ fromJson(steps.metrics.outputs.json).projectMetrics.total.cognitive.crap }}
        SKUNK_CYC: ${{ fromJson(steps.metrics.outputs.json).projectMetrics.total.cyclomatic.skunk }}
        SKUNK_COG: ${{ fromJson(steps.metrics.outputs.json).projectMetrics.total.cognitive.skunk }}
      with:
        comment-id: ${{ github.event.comment.id }}
        issue-number: ${{ github.event.pull_request.number }}
        body: |
          ## Weighted Code Coverage
          Project metrics:
          - **Coverage**: ${{ env.COVERAGE }}%

          |             | Wcc                          | CRAP                        | Skunk                        |
          |-------------|------------------------------|-----------------------------|------------------------------|
          | Cyclomatic  | ${{ env.WCC_CYC }}%  | ${{ env.CRAP_CYC }} | ${{ env.SKUNK_CYC }} |
          | Cognitive   | ${{ env.WCC_COG }}%  | ${{ env.CRAP_COG }} | ${{ env.SKUNK_COG }} |
        edit-mode: replace

  weighted-code-coverage-windows:

    needs: [build, docs]

    # Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages 
    # and pull-requests write pemission for the pull request comment.
    permissions:
      contents: write
      pages: write
      id-token: write
      pull-requests: write

    environment:
      name: wcc
      url: ${{ steps.deployment.outputs.page_url }}

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust stable
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview

    - name: Install grcov
      env:
        GRCOV_LINK: https://github.com/mozilla/grcov/releases/download
        GRCOV_BINARY: grcov-x86_64-pc-windows-msvc.zip
      run: |
        curl -LO "$Env:GRCOV_LINK/v$Env:GRCOV_VERSION/$Env:GRCOV_BINARY"
        7z e -y "$Env:GRCOV_BINARY" -o"${env:USERPROFILE}\.cargo\bin"

    - name: Install weighted-code-coverage
      env:
        WCC_LINK: https://github.com/SoftengPoliTo/weighted-code-coverage/releases/download
        WCC_BINARY: weighted-code-coverage-x86_64-pc-windows-msvc.zip
      run: |
        curl -LO "$Env:WCC_LINK/v$Env:WCC_VERSION/$Env:WCC_BINARY"
        7z e -y "$Env:WCC_BINARY" -o"${env:USERPROFILE}\.cargo\bin"

    - name: Run tests
      env:
        RUSTFLAGS: "-Cinstrument-coverage"
        LLVM_PROFILE_FILE: "cargo-rust-library-%p-%m.profraw"
      run: |
        cargo test --verbose

    - name: Run grcov
      run: |
        grcov . --binary-path ./target/debug/ --ignore "**/.cargo/**" --ignore "**/rustc/**" --ignore "./target/**" -t coveralls -s . --token YOUR_COVERALLS_TOKEN > coveralls.json

    - name: Run weighted-code-coverage
      id: wcc-run
      shell: bash
      run: |
        mkdir $HOME/wcc-output
        echo "html=$HOME/wcc-output" >> $GITHUB_OUTPUT
        echo "json=$HOME/wcc-output/wcc.json" >> $GITHUB_OUTPUT
        weighted-code-coverage --project-path ./ --grcov-format coveralls --grcov-path ./coveralls.json -m functions --json $HOME/wcc-output/wcc.json --html $HOME/wcc-output/

    - name: Setup GitHub Pages
      uses: actions/configure-pages@v5.0.0
      with:
        enablement: true

    - name: Upload Wcc html output
      uses: actions/upload-pages-artifact@v3.0.1
      with:
        path: ${{ steps.wcc-run.outputs.html }}

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4.0.5

    - name: Extract metric values
      id: metrics
      shell: bash
      env:
        JSON: ${{ steps.wcc-run.outputs.json }}
      run: |
        content=`cat ${JSON}`
        echo "json=$content" >> $GITHUB_OUTPUT

    - name: Extract branch name
      id: extract-branch
      if: github.event_name != 'pull_request'
      shell: bash
      run: echo "branch=${GITHUB_REF#refs/heads/}" >> "${GITHUB_OUTPUT}"

    - name: Define badge path
      id: badge-path
      if: github.event_name != 'pull_request'
      shell: bash
      env:
        BADGE_PATH: .github/badges/wcc.svg
      run: echo "path=${BADGE_PATH}" >> "${GITHUB_OUTPUT}"
      
    - name: Create badge directory
      if: github.event_name != 'pull_request'
      shell: bash
      env:
        BADGE_PATH: ${{ steps.badge-path.outputs.path }}
      run: mkdir -p "${BADGE_PATH%/*}" 

    - name: Determine badge color
      if: github.event_name != 'pull_request'
      id: badge-color
      shell: bash
      env:
        WCC: ${{ fromJson(steps.metrics.outputs.json).projectMetrics.total.cyclomatic.wcc }}
      run: |
        if [ ${WCC} -lt 60 ]; then
          echo "color=red" >> "${GITHUB_OUTPUT}"
        else
          echo "color=green" >> "${GITHUB_OUTPUT}"
        fi

    - name: Create badge
      if: github.event_name != 'pull_request'
      uses: emibcn/badge-action@v2.0.3
      id: badge
      with:
        label: wcc
        status: ${{ fromJson(steps.metrics.outputs.json).projectMetrics.total.cyclomatic.wcc }}%
        color: ${{ steps.badge-color.outputs.color }}
        path: ${{ steps.badge-path.outputs.path }}

    - name: Verify if badge changed
      if: github.event_name != 'pull_request'
      uses: tj-actions/verify-changed-files@v19
      id: badge-changed 
      with:
        files: ${{ steps.badge-path.outputs.path }}
      
    - name: Commit badge
      if: ${{ github.event_name != 'pull_request' && steps.badge-changed.outputs.files_changed == 'true' }}
      shell: bash
      env:
        BADGE: ${{ steps.badge-path.outputs.path }}
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add "${BADGE}"
        git commit -m "Add/Update wcc badge"

    - name: Push badge
      uses: ad-m/github-push-action@master
      if: ${{ github.event_name != 'pull_request' && success() }}
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ steps.extract-branch.outputs.branch }}

    - name: Create or update comment
      if: github.event_name == 'pull_request'
      uses: peter-evans/create-or-update-comment@v4
      env:
        COVERAGE: ${{ fromJson(steps.metrics.outputs.json).projectMetrics.total.coverage }}
        WCC_CYC: ${{ fromJson(steps.metrics.outputs.json).projectMetrics.total.cyclomatic.wcc }}
        WCC_COG: ${{ fromJson(steps.metrics.outputs.json).projectMetrics.total.cognitive.wcc }}
        CRAP_CYC: ${{ fromJson(steps.metrics.outputs.json).projectMetrics.total.cyclomatic.crap }}
        CRAP_COG: ${{ fromJson(steps.metrics.outputs.json).projectMetrics.total.cognitive.crap }}
        SKUNK_CYC: ${{ fromJson(steps.metrics.outputs.json).projectMetrics.total.cyclomatic.skunk }}
        SKUNK_COG: ${{ fromJson(steps.metrics.outputs.json).projectMetrics.total.cognitive.skunk }}
      with:
        comment-id: ${{ github.event.comment.id }}
        issue-number: ${{ github.event.pull_request.number }}
        body: |
          ## Weighted Code Coverage
          Project metrics:
          - **Coverage**: ${{ env.COVERAGE }}%

          |             | Wcc                          | CRAP                        | Skunk                        |
          |-------------|------------------------------|-----------------------------|------------------------------|
          | Cyclomatic  | ${{ env.WCC_CYC }}%  | ${{ env.CRAP_CYC }} | ${{ env.SKUNK_CYC }} |
          | Cognitive   | ${{ env.WCC_COG }}%  | ${{ env.CRAP_COG }} | ${{ env.SKUNK_COG }} |
        edit-mode: replace

################################## DEPENDENCY LAYER ###########################

  audit-ubuntu:

    needs: [code-coverage-ubuntu, weighted-code-coverage-ubuntu]

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Check dependencies changes
      uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          cargo:
            - 'Cargo.toml'
            - 'Cargo.lock'

    - name: Run cargo-audit
      if: steps.changes.outputs.cargo == 'true'
      uses: actions-rs/audit-check@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

  deny-ubuntu:

    needs: [code-coverage-ubuntu, weighted-code-coverage-ubuntu]

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Check dependencies changes
      uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          cargo:
            - 'Cargo.toml'
            - 'Cargo.lock'

    - name: Detect multiple versions of the same crate
      if: steps.changes.outputs.cargo == 'true'
      uses: EmbarkStudios/cargo-deny-action@v1
      with:
        command: check bans

  udeps-ubuntu:

    needs: [code-coverage-ubuntu, weighted-code-coverage-ubuntu]

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Check dependencies changes
      uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          cargo:
            - 'Cargo.toml'
            - 'Cargo.lock'

    - name: Install Rust nightly
      if: steps.changes.outputs.cargo == 'true'
      uses: dtolnay/rust-toolchain@nightly

    - name: Install cargo-udeps
      if: steps.changes.outputs.cargo == 'true'
      env:
        UDEPS_LINK: https://github.com/est31/cargo-udeps/releases/download
      run: |
        curl -L "$UDEPS_LINK/v$UDEPS_VERSION/cargo-udeps-v$UDEPS_VERSION-x86_64-unknown-linux-gnu.tar.gz" |
        tar xz -C $HOME/.cargo/bin --strip-components 2

    - name: Run cargo-udeps
      if: steps.changes.outputs.cargo == 'true'
      run: |
        cargo +nightly udeps --all-targets

  audit-macos:

    needs: [code-coverage-macos, weighted-code-coverage-macos]

    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v4

    - name: Check dependencies changes
      uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          cargo:
            - 'Cargo.toml'
            - 'Cargo.lock'

    - name: Run cargo-audit
      if: steps.changes.outputs.cargo == 'true'
      uses: actions-rs/audit-check@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

  deny-macos:

    needs: [code-coverage-macos, weighted-code-coverage-macos]

    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v4

    - name: Check dependencies changes
      uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          cargo:
            - 'Cargo.toml'
            - 'Cargo.lock'

    - name: Detect multiple versions of the same crate
      if: steps.changes.outputs.cargo == 'true'
      uses: EmbarkStudios/cargo-deny-action@v1
      with:
        command: check bans

  udeps-macos:

    needs: [code-coverage-macos, weighted-code-coverage-macos]

    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v4

    - name: Check dependencies changes
      uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          cargo:
            - 'Cargo.toml'
            - 'Cargo.lock'

    - name: Install Rust nightly
      if: steps.changes.outputs.cargo == 'true'
      uses: dtolnay/rust-toolchain@nightly

    - name: Install cargo-udeps
      if: steps.changes.outputs.cargo == 'true'
      env:
        UDEPS_LINK: https://github.com/est31/cargo-udeps/releases/download
      run: |
        curl -L "$UDEPS_LINK/v$UDEPS_VERSION/cargo-udeps-v$UDEPS_VERSION-x86_64-apple-darwin.tar.gz" |
        tar xz -C $HOME/.cargo/bin --strip-components 2

    - name: Run cargo-udeps
      if: steps.changes.outputs.cargo == 'true'
      run: |
        cargo +nightly udeps --all-targets

  audit-windows:

    needs: [code-coverage-windows, weighted-code-coverage-windows]

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4

    - name: Check dependencies changes
      uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          cargo:
            - 'Cargo.toml'
            - 'Cargo.lock'

    - name: Run cargo-audit
      if: steps.changes.outputs.cargo == 'true'
      uses: actions-rs/audit-check@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

  deny-windows:

    needs: [code-coverage-windows, weighted-code-coverage-windows]

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4

    - name: Check dependencies changes
      uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          cargo:
            - 'Cargo.toml'
            - 'Cargo.lock'

    - name: Detect multiple versions of the same crate
      if: steps.changes.outputs.cargo == 'true'
      uses: EmbarkStudios/cargo-deny-action@v1
      with:
        command: check bans

  udeps-windows:

    needs: [code-coverage-windows, weighted-code-coverage-windows]

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4

    - name: Check dependencies changes
      uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          cargo:
            - 'Cargo.toml'
            - 'Cargo.lock'

    - name: Install Rust nightly
      if: steps.changes.outputs.cargo == 'true'
      uses: dtolnay/rust-toolchain@nightly

    - name: Install cargo-udeps
      if: steps.changes.outputs.cargo == 'true'
      env:
        UDEPS_LINK: https://github.com/est31/cargo-udeps/releases/download
      run: |
        $UDEPS_BINARY = "cargo-udeps-v$Env:UDEPS_VERSION-x86_64-pc-windows-msvc.zip"
        curl -LO "$Env:UDEPS_LINK/v$Env:UDEPS_VERSION/$UDEPS_BINARY"
        7z e -y "$UDEPS_BINARY" -o"${env:USERPROFILE}\.cargo\bin"

    - name: Run cargo-udeps
      if: steps.changes.outputs.cargo == 'true'
      run: |
        cargo +nightly udeps --all-targets

################################## UNSAFE CHECKS LAYER #########################

  valgrind-ubuntu:

    needs: [audit-ubuntu, deny-ubuntu, udeps-ubuntu]

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install valgrind
      run: |
        sudo apt-get install valgrind

    - name: Run cargo-valgrind
      env:
        CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_RUNNER: "valgrind -s --leak-check=full --show-leak-kinds=all --error-exitcode=1"
      # Looking for vulnerabilities
      run: |
        cargo test

  careful-ubuntu:

    needs: [audit-ubuntu, deny-ubuntu, udeps-ubuntu]

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust nightly
      uses: dtolnay/rust-toolchain@nightly
      with:
        components: rust-src

    - name: Install cargo-careful
      env:
        CAREFUL_LINK: https://github.com/RalfJung/cargo-careful/releases/download
      run: |
        curl -L "$CAREFUL_LINK/v$CAREFUL_VERSION/cargo-careful.x86_64-unknown-linux-musl" \
        --output $HOME/.cargo/bin/cargo-careful
        chmod +x $HOME/.cargo/bin/cargo-careful

    - name: Run cargo-careful
      run: |
        cargo +nightly careful test
        # cargo +nightly careful run

  address-sanitizer-ubuntu:

    needs: [audit-ubuntu, deny-ubuntu, udeps-ubuntu]

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust nightly
      uses: dtolnay/rust-toolchain@nightly
      with:
        components: rust-src

    - name: Run AddressSanitizer
      env:
        RUSTFLAGS: -Zsanitizer=address -Copt-level=3
        RUSTDOCFLAGS: -Zsanitizer=address
      run: cargo test -Zbuild-std --target x86_64-unknown-linux-gnu
      # Use `cargo run` for the analysis of a binary.
      # Usage of the `help` command as base command, please replace it
      # with the effective command that AddressSanitizer has to analyze
      # run: cargo run -Zbuild-std --target x86_64-unknown-linux-gnu -- --help

  careful-macos:

    needs: [audit-macos, deny-macos, udeps-macos]

    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust nightly
      uses: dtolnay/rust-toolchain@nightly
      with:
        components: rust-src

    - name: Install cargo-careful
      env:
        CAREFUL_LINK: https://github.com/RalfJung/cargo-careful/releases/download
      run: |
        curl -L "$CAREFUL_LINK/v$CAREFUL_VERSION/cargo-careful.x86_64-apple-darwin" \
        --output $HOME/.cargo/bin/cargo-careful
        chmod +x $HOME/.cargo/bin/cargo-careful

    - name: Run cargo-careful
      run: |
        cargo +nightly careful test
        # cargo +nightly careful run

  address-sanitizer-macos:

    needs: [audit-macos, deny-macos, udeps-macos]

    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust nightly
      uses: dtolnay/rust-toolchain@nightly
      with:
        components: rust-src

    # Usage of the `help` command as base command, please replace it
    # with the effective command that AddressSanitizer has to analyze
    - name: Run AddressSanitizer
      env:
        RUSTFLAGS: -Zsanitizer=address -Copt-level=3
        RUSTDOCFLAGS: -Zsanitizer=address
      run: cargo test -Zbuild-std --target x86_64-apple-darwin
      # Use `cargo run` for the analysis of a binary.
      # Usage of the `help` command as base command, please replace it
      # with the effective command that AddressSanitizer has to analyze
      # run: cargo run -Zbuild-std --target x86_64-apple-darwin -- --help

  careful-windows:

    needs: [audit-windows, deny-windows, udeps-windows]

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust nightly
      uses: dtolnay/rust-toolchain@nightly
      with:
        components: rust-src

    - name: Install cargo-careful
      env:
        CAREFUL_LINK: https://github.com/RalfJung/cargo-careful/releases/download
      run: |
        curl -LO "$Env:CAREFUL_LINK/v$Env:CAREFUL_VERSION/cargo-careful.exe" `
        --output-dir "${env:USERPROFILE}\.cargo\bin"

    - name: Run cargo-careful
      run: |
        cargo +nightly careful test
        # cargo +nightly careful run
